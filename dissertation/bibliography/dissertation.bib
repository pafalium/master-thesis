
@inproceedings{sorensen2005impromptu,
author = {Sorensen, Andrew},
booktitle = {Proceedings of the Australasian Computer Music Conference},
number = {July},
pages = {2--4},
title = {{Impromptu: An interactive programming environment for composition and performance}},
year = {2009}
}

@article{sorensen2010programming,
  title={Programming with time: cyber-physical programming with impromptu},
  author={Sorensen, Andrew and Gardner, Henry},
  journal={ACM Sigplan Notices},
  volume={45},
  number={10},
  pages={822--834},
  year={2010},
  publisher={ACM}
}

@inproceedings{hickey2008clojure,
  title={The clojure programming language},
  author={Hickey, Rich},
  booktitle={Proceedings of the 2008 symposium on Dynamic languages},
  pages={1},
  year={2008},
  organization={ACM}
}

@article{10.1109/MIC.2011.148,
author = {Mark McGranaghan},
title = {ClojureScript: Functional Programming for JavaScript Platforms},
journal ={IEEE Internet Computing},
volume = {15},
number = {6},
issn = {1089-7801},
year = {2011},
pages = {97-102},
doi = {http://doi.ieeecomputersociety.org/10.1109/MIC.2011.148},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}

@book{reas2007processing,
abstract = {It has been more than twenty years since desktop publishing reinvented design, and it's clear that there is a growing need for designers and artists to learn programming skills to fill the widening gap between their ideas and the capability of their purchased software. This book is an introduction to the concepts of computer programming within the context of the visual arts. It offers a comprehensive reference and text for Processing (www.processing.org), an open-source programming language that can be used by students, artists, designers, architects, researchers, and anyone who wants to program images, animation, and interactivity.Processing have been tested in classrooms, workshops, and arts institutions, including UCLA, Carnegie Mellon, New York University, and Harvard University. Tutorial units make up the bulk of the book and introduce the syntax and concepts of software (including variables, functions, and object-oriented programming), cover such topics as photography and drawing in relation to software, and feature many short, prototypical example programs with related images and explanations. More advanced professional projects from such domains as animation, performance, and typography are discussed in interviews with their creators. "Extensions" present concise introductions to further areas of investigation, including computer vision, sound, and electronics. Appendixes, references to other material, and a glossary contain additional technical details. Processing can be used by reading each unit in order, or by following each category from the beginning of the book to the end. The Processing software and all of the code presented can be downloaded and run for future exploration.With essays by:<br Alexander R. Galloway, Golan Levin, R. Luke DuBois, Simon Greenwold, Francis Li, and Hernando Barrag\'{a}n and interviews with Jared Tarbell, Martin Wattenberg, James Paterson, Erik van Blockland, Ed Burton, Josh On, J\"{u}rg Lehni, Auriea Harvey and Micha\"{e}l Samyn, Mathew Cullen and Grady Hall, Bob Sabiston, Jennifer Steinkamp, Ruth Jarman and Joseph Gerhardt, Sue Costabile, Chris Csikszentmih\'{a}lyi, Golan Levin and Zachary Lieberman, and Mark Hansen.},
author = {Reas, Casey and Fry, Ben},
booktitle = {Processing},
doi = {10.1523/JNEUROSCI.2525-09.2009},
isbn = {9780262182621},
issn = {15292401},
number = {2},
pages = {736},
pmid = {20016109},
publisher = {Mit Press},
title = {{Processing: A Programming Handbook for Visual Designers and Artists}},
url = {http://www.amazon.com/dp/0262182629},
volume = {54},
year = {2007}
}

@masterthesis{de2012modern,
author = {{Lopes}, Jos\'{e}},
title = {{Modern Programming for Generative Design}},
year = {2012},
school = {Instituto Superior T\'{e}cnico}
}

@article{lopes2011portable,
abstract = {Most CAD applications provide programming languages for automation and generative design. However, programs written in these languages are not portable because they execute only in the family of CAD applications for which they were originally written. Consequently, users are locked-in to one family of CAD applications and they cannot reuse programs written for other families. In this paper, we propose a solution to this problem: Rosetta, a programming environment that is compatible with several CAD applications. Rosetta is composed of (1) an abstraction layer that allows portable and transparent access to several different CAD applications; (2) back-ends that translate the abstraction layer into different CAD applications; ( 3 ) front-end programming languages in which users write the generative design programs; and ( 4 ) an intermediate programming language that encompasses the language constructs essential for geometric modeling and that is used as a compilation target for the front-ends. Rosetta allows users to explore different front-ends and back-ends, in order tofind a combination that is most suitable for the problem at hand. As a result, users have access to different programming languages, namely, visual and textual, which can be used interchangeably to write generative design programs, without breaking portability. Furthermore, Rosetta ensures that a single program can be used to create identical geometric models in different CAD applications. This approach promotes the developmentof programs that are portable across the most used CAD applications, thus facilitating the dissemination of the programs and of the underlying ideas.},

author = {Lopes, Jos{\'{e}} and Leit{\~{a}}o, Ant{\'{o}}nio},
isbn = {9781613645956},
journal = {Integration Through Computation - Proceedings of the 31st Annual Conference of the Association for Computer Aided Design in Architecture, ACADIA 2011},
pages = {196--203},
title = {{Portable generative design for CAD applications}},
year = {2011}
}

@incollection{aish2012designscript,
  title={DesignScript: origins, explanation, illustration},
  author={Aish, Robert},
  booktitle={Computational Design Modelling},
  pages={1--8},
  year={2012},
  publisher={Springer}
}

@article{aish2013designscript,
  title={DesignScript: Scalable Tools for Design Computation},
  author={Aish, Robert},
  year={2013}
}

@article{PER-GRA:2007,
  Author    = {P\'erez, Fernando and Granger, Brian E.},
  Title     = {{IP}ython: a System for Interactive Scientific Computing},
  Journal   = {Computing in Science and Engineering},
  Volume    = {9},
  Number    = {3},
  Pages     = {21--29},
  month     = may,
  year      = 2007,
  url       = "http://ipython.org",
  ISSN      = "1521-9615",
  doi       = {10.1109/MCSE.2007.53},
  publisher = {IEEE Computer Society},
}

@misc{openjscad2015site,
	author = "RenÃ© K. Muller",
	title = "OpenJSCAD.org",
	year = "2015",
	howpublished = "retrieved from \url{http://openjscad.org/}",
	note = "[Online; accessed 20-November-2015]"
}

@inproceedings{houston2013clara,
	title={Clara. io: full-featured 3D content creation for the web and cloud era},
	author={Houston, Ben and Larsen, Wayne and Larsen, Bryan and Caron, Jack and Nikfetrat, Nima and Leung, Catherine and Silver, Jesse and Kamal-Al-Deen, Hasan and Callaghan, Peter and Chen, Roy and others},
	booktitle={ACM SIGGRAPH 2013 Studio Talks},
	pages={8},
	year={2013},
	organization={ACM}
}

@misc{lighttable2015site,
	author = "Chris Granger",
	title = "Lighttable",
	year = "2015",
	howpublished = "retrieved from \url{http://lighttable.com/}",
	note = "[Online; accessed 25-November-2015]"
}

@misc{kintel2011openscad,
	title={OpenSCAD, The Programmers Solid 3D CAD Modeller},
	author={Marius Kintel},
	howpublished = "retrieved from \url{http://www.openscad.org/}",
	note = "[Online; accessed 25-November-2015]",
	year={2015}
}

@article{tilkov2010node,
	title={Node. js: Using JavaScript to build high-performance network programs},
	author={Tilkov, Stefan and Vinoski, Steve},
	journal={IEEE Internet Computing},
	number={6},
	pages={80--83},
	year={2010},
	publisher={IEEE}
}

@article{victor2012learnable,
abstract = {Programming is a way of thinking, not a rote skill. Learning about "for" loops is not learning to program, any more than learning about pencils is learning to draw.$\backslash$n    People understand what they can see. If a programmer cannot see what a program is doing, she can't understand it.$\backslash$n$\backslash$nThus, the goals of a programming system should be:$\backslash$n$\backslash$n    to support and encourage powerful ways of thinking$\backslash$n    to enable programmers to see and understand the execution of their programs},
author = {Victor, Bret},
journal = {http://www.worrydream.com},
title = {{Learnable Programming}},
url = {http://worrydream.com/LearnableProgramming/},
year = {2012}
}

@article{leitao2014pushing,
author = {Leit{\~{a}}o, Ant{\'{o}}nio and Fernandes, Rita and Santos, Lu{\'{i}}s},
doi = {http://dx.doi.org/10.5151/despro-sigradi2013-0043},
issn = {2318-6968},
journal = {Blucher Design Proceedings},
number = {7},
pages = {235--238},
title = {{Pushing the Envelope: Stretching the Limits of Generative Design}},
url = {www.proceedings.blucher.com.br/article-details/pushing-the-envelope-stretching-the-limits-of-generative-design-14129},
volume = {1},
year = {2014}
}

@article{leitao2012programming,
  title={Programming languages for generative design: A comparative study},
  author={Leit{\~a}o, Ant{\'o}nio and Santos, Lu{\'\i}s and Lopes, Jos{\'e}},
  journal={International Journal of Architectural Computing},
  volume={10},
  number={1},
  pages={139--162},
  year={2012},
  publisher={SAGE Publications}
}

@inproceedings{Janssen2016,
abstract = {For complex parametric modelling tasks, systems that use textual programming languages (TPLs) currently have clear ad- vantages over visual programming languages (VPLs) systems. Their support for a rich variety of programming mechanisms means that the complexity of the program can remain commensurate with the com- plexity of the modelling task. A prototype parametric modelling sys- tem called Mo?bius is presented that aims to overcome the limitations of existing VPL systems. The proposed system integrates associative and imperative programming styles and supports iterative looping and higher order functions. In order to demonstrate the versatility of the Mo?bius, a modelling task is presented that requires the model to be modified.},
author = {Janssen, Patrick and Li, Ruize and Mohanty, Akshata},
booktitle = {Living Systems and Micro-Utopias: Towards Continuous Designing, Proceedings of the 21st International Conference on Computer-Aided Architectural Design Research in Asia (CAADRIA 2016)},
editor = {Chien, S. and Choo, S. and Schnabel, M. A. and Nakapan, W. and Kim, M. J. and Roudavski, S.},
file = {:E$\backslash$:/Users/Pedro-170/Documents/Rosetta/Papers/PatrikJanssen-Mobius.pdf:pdf},
keywords = {Parametric procedural modelling,generative design,human-computer interaction,visual programming},
pages = {157--166},
title = {{M{\"{O}}BIUS: A parametric modeller for the web}},
url = {http://papers.cumincad.org/cgi-bin/works/Show?{\_}id=caadria2016{\_}157},
year = {2016}
}

@inproceedings{Leitao2014illustrated,
abstract = {In the area of Generative Design, programs are becoming increasingly$\backslash$ncomplex and harder to understand, communicate, and share, enlarging the$\backslash$ngap between them and the architectural concepts they implement. To$\backslash$novercome this problem, we need to develop documentation techniques and$\backslash$nprogram comprehension tools targeted to the Generative Design domain.$\backslash$nThis paper proposes Illustrated Programming as a coherent approach for$\backslash$nimproving program documentation and program comprehension, by$\backslash$nestablishing a correlation between the intended design, the Generative$\backslash$nDesign program, and the generated model. This correlation is achieved by$\backslash$nthe inclusion of sketches within programs and by bidirectional$\backslash$ntraceability and immediate feedback between programs and models.},
address = {Los Angeles},
author = {Leitao, Antonio and Lopes, Jose and Santos, Luis},
booktitle = {ACADIA 14: Design Agency, Proceedings of the 34th Annual Conference of the Association for Computer Aided Design in Architecture (ACADIA)},
isbn = {978-1-926724-51-5},
pages = {291--300},
title = {{Illustrated Programming}},
year = {2014}
}

@misc{rfc6455,
	series =	{Request for Comments},
	number=		6455,
	howpublished=	{RFC 6455},
	publisher =	{RFC Editor},
	doi =		{10.17487/rfc6455},
	url =		{https://rfc-editor.org/rfc/rfc6455.txt},
	author=		{Alexey Melnikov and Ian Fette},
	title=		{{The WebSocket Protocol}},
	pagetotal =	71,
	year =		2011,
	month =		dec,
	day =		14,
	abstract =	{The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code. The security model used for this is the origin-based security model commonly used by web browsers. The protocol consists of an opening handshake followed by basic message framing, layered over TCP. The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling). [STANDARDS-TRACK]},
}

@article{marrin2011webgl,
  title={WebGL specification},
  author={Marrin, Chris},
  journal={Khronos WebGL Working Group},
  year={2011}
}

@article{hickson2011html5,
  title={HTML5: A vocabulary and associated APIs for HTML and XHTML},
  author={Hickson, Ian and Hyatt, David},
  journal={W3C Working Draft, May},
  volume={25},
  year={2011}
}

@inproceedings{Sutherland:1964:SPM:800265.810742,
address = {New York, NY, USA},
author = {Sutherland, Ivan E},
booktitle = {Proceedings of the SHARE Design Automation Workshop},
doi = {10.1145/800265.810742},
pages = {6.329----6.346},
publisher = {ACM},
series = {DAC '64},
title = {{Sketchpad: a man-machine graphical communication system}},
url = {http://portal.acm.org/citation.cfm?doid=800265.810742},
year = {1964}
}

@book{Maeda:2001:DN:559503,
abstract = {Most art and technology projects pair artists with engineers or scientists: the artist has the conception, and the technical person provides the know-how. John Maeda is an artist and a computer scientist, and he views the computer not as a substitute for brush and paint but as an artistic medium in its own right. Design By Numbers is a reader-friendly tutorial on both the philosophy and nuts-and-bolts techniques of programming for artists.$\backslash$n$\backslash$nPracticing what he preaches, Maeda composed Design By Numbers using a computational process he developed specifically for the book. He introduces a programming language and development environment, available on the Web, which can be freely downloaded or run directly within any JAVA-enabled Web browser. Appropriately, the new language is called DBN (for "design by numbers"). Designed for "visual" peopleâartists, designers, anyone who likes to pick up a pencil and doodleâDBN has very few commands and consists of elements resembling those of many other languages, such as LISP, LOGO, C/JAVA, and BASIC.$\backslash$n$\backslash$nThroughout the book Maeda emphasizes the importanceâand delightsâof understanding the motivation behind computer programming, as well as the many wonders that emerge from well-written programs. Sympathetic to the "mathematically challenged," he places minimal emphasis on mathematics in the first half of the book. Because computation is inherently mathematical, the books second half uses intermediate mathematical concepts that generally do not go beyond high-school algebra. The reader who masters the skills so clearly set out by Maeda will be ready to exploit the true character of digital media design.},
address = {Cambridge, MA, USA},
author = {Maeda, John},
isbn = {9780262632447},
issn = {08945373},
pages = {256},
pmid = {14137991},
publisher = {MIT Press},
title = {{Design by Numbers}},
year = {2001}
}

@book{terzidis2003expressive,
abstract = {The mode of utilizing computers in architecture today is vague, inexplicit, and, often, arbitrary. Designers tend to conceptualize entities or processes and then enter, manipulate and print using computer systems. Often, theories of design and form are "translated" into computational ones, merely to participate in the digital fashion. This situation creates confusion, misunderstanding, and inconsistency for both students and practitioners over the appropriate use of computers in architecture and design. Challenging these assumptions, this book offers an appropriate theoretical context for computer-based experimentations, explorations, and form-making. By employing computational and formal theories, the author offers a theoretical bridge between the establishment of the past and the potential of the future.},
annote = {Acerca de Generative Design.},
author = {Terzidis, Kostas},
doi = {10.4324/9780203586891},
isbn = {0415317444},
keywords = {Form;Computation;Generative Process},
pages = {93},
pmid = {13123700},
publisher = {Taylor {\&} Francis},
title = {{Expressive Form: A Conceptual Approach to Computational Design}},
url = {http://books.google.com/books?id=4hKd8S9ydUEC{\&}pgis=1},
year = {2003}
}

@book{watson2009gdl,
  title={GDL Handbook: A Comprehensive Guide to Creating Powerful ArchiCAD Objects},
  author={Watson, A. and Cadimage Solutions and Cadimage Solutions Staff and Cadimage Tools (Firm)},
  isbn={9780473148607},
  url={https://books.google.pt/books?id=JvBRPgAACAAJ},
  year={2009},
  publisher={Cadimage Solutions}
}

@article{rossum2003python,
  title={The Python Language Reference Manual},
  author={Rossum, GV and Drake, FL},
  journal={Network Theory Ltd},
  year={2003}
}

@article{flatt2016racket,
  title={The Racket Guide},
  author={Flatt, Matthew and Findler, Robert Bruce},
  year={2016}
}
